<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Codes | tim tregubov]]></title>
  <link href="http://timofei7.github.com/blog/categories/codes/atom.xml" rel="self"/>
  <link href="http://timofei7.github.com/"/>
  <updated>2013-02-14T17:10:18-08:00</updated>
  <id>http://timofei7.github.com/</id>
  <author>
    <name><![CDATA[timofei7]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[wrapping Unity C# coroutines for exception handling, value retrieval, and locking]]></title>
    <link href="http://timofei7.github.com/blog/2013/02/05/unity-coroutine-wrapper/"/>
    <updated>2013-02-05T01:40:00-08:00</updated>
    <id>http://timofei7.github.com/blog/2013/02/05/unity-coroutine-wrapper</id>
    <content type="html"><![CDATA[<p>Firstly, coroutines are awesome.  If you aren't familiar with them (particularly in the context of Unity3d) then you should be.  In short, <a href="http://en.wikipedia.org/wiki/Coroutine">coroutines</a> are methods that can suspend and resume execution.  In the context of Unity what this means is that you can have methods that appear to run concurrently. The Unity documentation has some <a href="http://docs.unity3d.com/Documentation/ScriptReference/index.Coroutines_26_Yield.html">examples</a>.</p>

<p>Coroutines are <strong>the</strong> way to script a lot of things in Unity, however there are a few problems that you may run into if you use them heavily: exception handling, return values, and locking. Especially if you use nested coroutines!</p>

<!--more-->


<h3>Return Values</h3>

<p>Coroutines in Unity, although built on iterators, don't handle return values. Even though it appears as if you can return a value, internally return values are used to keep track of where to resume.  But, "I want a coroutine to return something!", you say.  So you work around that using a callback:
``` c#
IEnumerator FooBar()
{</p>

<pre><code>yield return StartCoroutine(DoSomethingEverySecond(success=&gt; {
    if (success)
        doMoreStuff;
}));
</code></pre>

<p>}</p>

<p>IEnumerator DoSomethingEverySecond(System.Action<bool> success)
{</p>

<pre><code>bool result = false;
foreach (Something s in somethings)
{
    if (s.doStuff())
        result = true;
    yield return new WaitForSeconds(1f);
}
if (success != null) success(result);
</code></pre>

<p>}
```
Ok so this helps with getting a return value out of a coroutine.  It works well enough. Only caveat is in the callback code you can't do another yield, not a big problem, and solveable by setting some variables. We'll return to this topic.</p>

<h3>Exception Handling</h3>

<p>There is no exception handling at the coroutine level.  You can't put a <code>yield</code> statement in a <code>try…catch</code> block.  This in particular can cause a problem if you have nested coroutines:
``` c#
void Start()
{</p>

<pre><code>try { StartCoroutine(ParentCoroutine()); } //can try...catch if there's no yielding
catch (Exception e) { Debug.LogError("oh noes we had a problem: " + e.Message); }
</code></pre>

<p>}</p>

<p>IEnumerator ParentCoroutine()
{</p>

<pre><code>yield return StartCoroutine(NestedCoroutineDoSomeStuff());  //can't try...catch these
yield return StartCoroutine(NestedCoroutineFoo()); //if this has an exception nothing below executes
if (stuff)
    yield return StartCoroutine(NestedCoroutineBar());
</code></pre>

<p>}
```</p>

<p>Logically, if any of the nested coroutines throw an exception then the parent will stop execution.  Now, this is only fair, but since you can't <code>try…catch</code> the nested coroutines it forces you to have to do error handling at a much more obnoxious nested level.  You have to make sure to handle all exceptions in each subroutine, even if it doesn't really make sense to do that.  For instance you have a MovePiece coroutine,  if it fails (say the piece was attacked mid move) what you'd like to do in the parent coroutine (which is something like AttackState) is notice the failed move and handle it there.  If the MovePiece coroutine does a bunch of stuff (set some flags, run a few different animations) the parent probably only cares whether it was successfull or not.  You could use a callback like above to indicate success but, this doesn't help if MovePiece threw an exception.  In that case the parent coroutine exits and we're stuck handling the exception at too high a level (say in a non-coroutine above the parent). Not ideal.</p>

<p>Ideally we'd be able to catch any exception per coroutine (nested or not) allowing us to think of each coroutine as a logical unit as it should be.  A great solution for this <a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know">exists</a>. Part of this solution is also a better way to handle return values without having to use a callback.  This uses a parametrized wrapper to Coroutine and allows us to handle exceptions and return values like so:
``` c#
Coroutine<bool> dostuff = StartCoroutine<bool>(DoStuff()); // declare a return value type
yield return dostuff.coroutine;
try
{</p>

<pre><code>if (dostuff.Value)  //attempt to access the return value
    NextStuff();
</code></pre>

<p>}
catch
{</p>

<pre><code>//and handle any exceptions here
</code></pre>

<p>}
```</p>

<p>That is much better!  Now the child exits without interrupting the parent and the parent can deal with it appropriately (exceptions and return values).  Now, what's this about locking?</p>

<h3>Locking</h3>

<p>The other problem is locking.  Coroutines (although technically not multi-threaded in Unity) do cause concurrency problems!  What if, based on user input, you start a Coroutine multiple times and it operates on the same objects?  A mess can ensue.  One solution in Unity is that you can start a coroutine using a string name of the IEnumerator method.  This uses reflection and is yucky.  Who want to use strings when you're using a nice strongly typed language like C#?  But, if you use strings you can do <code>StopCoroutine("DoStuff"); StartCoroutine("DoStuff")</code>.  Another option is to just have some instance variable bool and appropriate logic for every coroutine.  This too gets messy quickly with lots of coroutines.</p>

<p>These techniques get you part of the way but what if you want a coroutine to actually just block/wait for a previous instance to finish running like traditional locking but without any undue messiness?  Well using <code>lock(someobject)</code> doesn't work, because it would only be evaluated once and isn't checked on the coroutine resume.  Some people have written large coroutine managers that help with all these problems but those seemed like overkill so I built on the exception handling stuff and added locking support. The idea is that you start the coroutine with a string identifier (if none is given no locking is performed) and an optional timeout period.  With the string identifier each MonoBehavior keeps the currently running coroutines in a queue and either yields (analogous to blocking on a lock) until it's turn comes up or bails on a timeout.  Like so:
```
StartCoroutine(DoStuff(), "DoStuff", 10f); // will yield null</p>

<pre><code>                                       // if any previous "DoStuff"s are running up to 10seconds
</code></pre>

<p>```</p>

<p>The easiest way to use this is to extend MonoBehaviour and use the new class as the base class for all your MonoBehaviours.  Here is mine:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My MonoBehaviour Base Class   (TTMonoBehaviour.cs)</span> <a href='/downloads/code/csharp/TTMonoBehaviour.cs'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// Extending MonoBehaviour to add some extra functionality</span>
</span><span class='line'><span class="c1">/// Exception handling from: http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know</span>
</span><span class='line'><span class="c1">/// </span>
</span><span class='line'><span class="c1">/// 2013 Tim Tregubov</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TTMonoBehaviour</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">private</span> <span class="n">LockQueue</span> <span class="n">LockedCoroutineQueue</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>			
</span><span class='line'>	<span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>	<span class="c1">/// Coroutine with return value AND exception handling on the return value. </span>
</span><span class='line'>	<span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>	<span class="k">public</span> <span class="n">Coroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">StartCoroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerator</span> <span class="n">coroutine</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">Coroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">coroutineObj</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Coroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
</span><span class='line'>		<span class="n">coroutineObj</span><span class="p">.</span><span class="n">coroutine</span> <span class="p">=</span> <span class="k">base</span><span class="p">.</span><span class="n">StartCoroutine</span><span class="p">(</span><span class="n">coroutineObj</span><span class="p">.</span><span class="n">InternalRoutine</span><span class="p">(</span><span class="n">coroutine</span><span class="p">));</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">coroutineObj</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>	<span class="c1">/// Lockable coroutine. Can either wait for a previous coroutine to finish or a timeout or just bail if previous one isn&#39;t done.</span>
</span><span class='line'>	<span class="c1">/// Caution: the default timeout is 10 seconds. Coroutines that timeout just drop so if its essential increase this timeout.</span>
</span><span class='line'>	<span class="c1">/// Set waitTime to 0 for no wait</span>
</span><span class='line'>	<span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>	<span class="k">public</span> <span class="n">Coroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">StartCoroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerator</span> <span class="n">coroutine</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lockID</span><span class="p">,</span> <span class="kt">float</span> <span class="n">waitTime</span> <span class="p">=</span> <span class="m">10f</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">LockedCoroutineQueue</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="n">LockedCoroutineQueue</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LockQueue</span><span class="p">();</span>
</span><span class='line'>		<span class="n">Coroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">coroutineObj</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Coroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">lockID</span><span class="p">,</span> <span class="n">waitTime</span><span class="p">,</span> <span class="n">LockedCoroutineQueue</span><span class="p">);</span>
</span><span class='line'>		<span class="n">coroutineObj</span><span class="p">.</span><span class="n">coroutine</span> <span class="p">=</span> <span class="k">base</span><span class="p">.</span><span class="n">StartCoroutine</span><span class="p">(</span><span class="n">coroutineObj</span><span class="p">.</span><span class="n">InternalRoutine</span><span class="p">(</span><span class="n">coroutine</span><span class="p">));</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">coroutineObj</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>	<span class="c1">/// Coroutine with return value AND exception handling AND lockable</span>
</span><span class='line'>	<span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>	<span class="k">public</span> <span class="k">class</span> <span class="nc">Coroutine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">private</span> <span class="n">T</span> <span class="n">returnVal</span><span class="p">;</span>
</span><span class='line'>		<span class="k">private</span> <span class="n">Exception</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>		<span class="k">private</span> <span class="kt">string</span> <span class="n">lockID</span><span class="p">;</span>
</span><span class='line'>		<span class="k">private</span> <span class="kt">float</span> <span class="n">waitTime</span><span class="p">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">private</span> <span class="n">LockQueue</span> <span class="n">lockedCoroutines</span><span class="p">;</span> <span class="c1">//reference to objects lockdict</span>
</span><span class='line'>		<span class="k">private</span> <span class="kt">bool</span> <span class="n">lockable</span><span class="p">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">public</span> <span class="n">Coroutine</span> <span class="n">coroutine</span><span class="p">;</span>
</span><span class='line'>		<span class="k">public</span> <span class="n">T</span> <span class="n">Value</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">get</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="n">e</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="k">throw</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>				<span class="k">return</span> <span class="n">returnVal</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">public</span> <span class="nf">Coroutine</span><span class="p">()</span> <span class="p">{</span> <span class="n">lockable</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>		<span class="k">public</span> <span class="nf">Coroutine</span><span class="p">(</span><span class="kt">string</span> <span class="n">lockID</span><span class="p">,</span> <span class="kt">float</span> <span class="n">waitTime</span><span class="p">,</span> <span class="n">LockQueue</span> <span class="n">lockedCoroutines</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="n">lockable</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="n">lockID</span> <span class="p">=</span> <span class="n">lockID</span><span class="p">;</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="n">lockedCoroutines</span> <span class="p">=</span> <span class="n">lockedCoroutines</span><span class="p">;</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="n">waitTime</span> <span class="p">=</span> <span class="n">waitTime</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">public</span> <span class="n">IEnumerator</span> <span class="nf">InternalRoutine</span><span class="p">(</span><span class="n">IEnumerator</span> <span class="n">coroutine</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">lockable</span> <span class="p">&amp;&amp;</span> <span class="n">lockedCoroutines</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>			<span class="p">{</span>		
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="n">lockedCoroutines</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">lockID</span><span class="p">))</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="k">if</span> <span class="p">(</span><span class="n">waitTime</span> <span class="p">==</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>					<span class="p">{</span>
</span><span class='line'>						<span class="c1">//Debug.Log(this.GetType().Name + &quot;: coroutine already running and wait not requested so exiting: &quot; + lockID);</span>
</span><span class='line'>						<span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>					<span class="p">}</span>
</span><span class='line'>					<span class="k">else</span>
</span><span class='line'>					<span class="p">{</span>
</span><span class='line'>						<span class="c1">//Debug.Log(this.GetType().Name + &quot;: previous coroutine already running waiting max &quot; + waitTime + &quot; for my turn: &quot; + lockID);</span>
</span><span class='line'>						<span class="kt">float</span> <span class="n">starttime</span> <span class="p">=</span> <span class="n">Time</span><span class="p">.</span><span class="n">time</span><span class="p">;</span>
</span><span class='line'>						<span class="kt">float</span> <span class="n">counter</span> <span class="p">=</span> <span class="m">0f</span><span class="p">;</span>
</span><span class='line'>						<span class="n">lockedCoroutines</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">lockID</span><span class="p">,</span> <span class="n">coroutine</span><span class="p">);</span>
</span><span class='line'>						<span class="k">while</span> <span class="p">(!</span><span class="n">lockedCoroutines</span><span class="p">.</span><span class="n">First</span><span class="p">(</span><span class="n">lockID</span><span class="p">,</span> <span class="n">coroutine</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">Time</span><span class="p">.</span><span class="n">time</span> <span class="p">-</span> <span class="n">starttime</span><span class="p">)</span> <span class="p">&lt;</span> <span class="n">waitTime</span><span class="p">)</span>
</span><span class='line'>						<span class="p">{</span>
</span><span class='line'>							<span class="k">yield</span> <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>							<span class="n">counter</span> <span class="p">+=</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">;</span>
</span><span class='line'>						<span class="p">}</span>
</span><span class='line'>						<span class="k">if</span> <span class="p">(</span><span class="n">counter</span> <span class="p">&gt;=</span> <span class="n">waitTime</span><span class="p">)</span>
</span><span class='line'>						<span class="p">{</span>
</span><span class='line'>							<span class="kt">string</span> <span class="n">error</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">Name</span> <span class="p">+</span> <span class="s">&quot;: coroutine &quot;</span> <span class="p">+</span> <span class="n">lockID</span> <span class="p">+</span> <span class="s">&quot; bailing! due to timeout: &quot;</span> <span class="p">+</span> <span class="n">counter</span><span class="p">;</span>
</span><span class='line'>							<span class="n">Debug</span><span class="p">.</span><span class="n">LogError</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>							<span class="k">this</span><span class="p">.</span><span class="n">e</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Exception</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>							<span class="n">lockedCoroutines</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">lockID</span><span class="p">,</span> <span class="n">coroutine</span><span class="p">);</span>
</span><span class='line'>							<span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>						<span class="p">}</span>
</span><span class='line'>					<span class="p">}</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>				<span class="k">else</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="n">lockedCoroutines</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">lockID</span><span class="p">,</span> <span class="n">coroutine</span><span class="p">);</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			
</span><span class='line'>			<span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="k">try</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="k">if</span> <span class="p">(!</span><span class="n">coroutine</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">())</span>
</span><span class='line'>					<span class="p">{</span>
</span><span class='line'>						<span class="k">if</span> <span class="p">(</span><span class="n">lockable</span><span class="p">)</span> <span class="n">lockedCoroutines</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">lockID</span><span class="p">,</span> <span class="n">coroutine</span><span class="p">);</span>
</span><span class='line'>						<span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>					<span class="p">}</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>				<span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="k">this</span><span class="p">.</span><span class="n">e</span> <span class="p">=</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>					<span class="n">Debug</span><span class="p">.</span><span class="n">LogError</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">Name</span> <span class="p">+</span> <span class="s">&quot;: caught Coroutine exception! &quot;</span> <span class="p">+</span> <span class="n">e</span><span class="p">.</span><span class="n">Message</span> <span class="p">+</span> <span class="s">&quot;\n&quot;</span> <span class="p">+</span> <span class="n">e</span><span class="p">.</span><span class="n">StackTrace</span><span class="p">);</span>
</span><span class='line'>					<span class="k">if</span> <span class="p">(</span><span class="n">lockable</span><span class="p">)</span> <span class="n">lockedCoroutines</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">lockID</span><span class="p">,</span> <span class="n">coroutine</span><span class="p">);</span>
</span><span class='line'>					<span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>				
</span><span class='line'>				<span class="kt">object</span> <span class="n">yielded</span> <span class="p">=</span> <span class="n">coroutine</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span>
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="n">yielded</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">yielded</span><span class="p">.</span><span class="n">GetType</span><span class="p">()</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">))</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="n">returnVal</span> <span class="p">=</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">yielded</span><span class="p">;</span>
</span><span class='line'>					<span class="k">if</span> <span class="p">(</span><span class="n">lockable</span><span class="p">)</span> <span class="n">lockedCoroutines</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">lockID</span><span class="p">,</span> <span class="n">coroutine</span><span class="p">);</span>
</span><span class='line'>					<span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>				<span class="k">else</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="k">yield</span> <span class="k">return</span> <span class="n">coroutine</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	
</span><span class='line'>	<span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>	<span class="c1">/// coroutine lock and queue</span>
</span><span class='line'>	<span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>	<span class="k">public</span> <span class="k">class</span> <span class="nc">LockQueue</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">private</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IEnumerator</span><span class="p">&gt;&gt;</span> <span class="n">LockedCoroutines</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">public</span> <span class="nf">LockQueue</span><span class="p">()</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="n">LockedCoroutines</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IEnumerator</span><span class="p">&gt;&gt;();</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>		<span class="c1">/// check if LockID is locked</span>
</span><span class='line'>		<span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>		<span class="k">public</span> <span class="kt">bool</span> <span class="nf">Contains</span><span class="p">(</span><span class="kt">string</span> <span class="n">lockID</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">LockedCoroutines</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">lockID</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>		<span class="c1">/// check if given coroutine is first in the queue</span>
</span><span class='line'>		<span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>		<span class="k">public</span> <span class="kt">bool</span> <span class="nf">First</span><span class="p">(</span><span class="kt">string</span> <span class="n">lockID</span><span class="p">,</span> <span class="n">IEnumerator</span> <span class="n">coroutine</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="kt">bool</span> <span class="n">ret</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">Contains</span><span class="p">(</span><span class="n">lockID</span><span class="p">))</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="n">LockedCoroutines</span><span class="p">[</span><span class="n">lockID</span><span class="p">].</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="n">ret</span> <span class="p">=</span> <span class="n">LockedCoroutines</span><span class="p">[</span><span class="n">lockID</span><span class="p">][</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="n">coroutine</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>		<span class="c1">/// Add the specified lockID and coroutine to the coroutine lockqueue</span>
</span><span class='line'>		<span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>		<span class="k">public</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">string</span> <span class="n">lockID</span><span class="p">,</span> <span class="n">IEnumerator</span> <span class="n">coroutine</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(!</span><span class="n">LockedCoroutines</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">lockID</span><span class="p">))</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="n">LockedCoroutines</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">lockID</span><span class="p">,</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IEnumerator</span><span class="p">&gt;());</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			
</span><span class='line'>			<span class="k">if</span> <span class="p">(!</span><span class="n">LockedCoroutines</span><span class="p">[</span><span class="n">lockID</span><span class="p">].</span><span class="n">Contains</span><span class="p">(</span><span class="n">coroutine</span><span class="p">))</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="n">LockedCoroutines</span><span class="p">[</span><span class="n">lockID</span><span class="p">].</span><span class="n">Add</span><span class="p">(</span><span class="n">coroutine</span><span class="p">);</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>		<span class="c1">/// Remove the specified coroutine and queue if empty</span>
</span><span class='line'>		<span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>		<span class="k">public</span> <span class="kt">bool</span> <span class="nf">Remove</span><span class="p">(</span><span class="kt">string</span> <span class="n">lockID</span><span class="p">,</span> <span class="n">IEnumerator</span> <span class="n">coroutine</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="kt">bool</span> <span class="n">ret</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">LockedCoroutines</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">lockID</span><span class="p">))</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="n">LockedCoroutines</span><span class="p">[</span><span class="n">lockID</span><span class="p">].</span><span class="n">Contains</span><span class="p">(</span><span class="n">coroutine</span><span class="p">))</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="n">ret</span> <span class="p">=</span> <span class="n">LockedCoroutines</span><span class="p">[</span><span class="n">lockID</span><span class="p">].</span><span class="n">Remove</span><span class="p">(</span><span class="n">coroutine</span><span class="p">);</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>				
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="n">LockedCoroutines</span><span class="p">[</span><span class="n">lockID</span><span class="p">].</span><span class="n">Count</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>				<span class="p">{</span>
</span><span class='line'>					<span class="n">ret</span> <span class="p">=</span> <span class="n">LockedCoroutines</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">lockID</span><span class="p">);</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What do you think?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generic singleton MonoBehavior part 2: singleton self loading prefab]]></title>
    <link href="http://timofei7.github.com/blog/2013/01/11/unity-prefab-singleton/"/>
    <updated>2013-01-11T01:40:00-08:00</updated>
    <id>http://timofei7.github.com/blog/2013/01/11/unity-prefab-singleton</id>
    <content type="html"><![CDATA[<p>I had a <a href="blog/2012/04/26/unity-singletons/">previous post</a> about singletons in <a href="http://www.unity3d.com">Unity3D</a> and have since added a useful functionality to that class.  One of the useful features of a singleton is that it is self instantiating.  But what if you want to use the Unity editor to expose some public variables and have some other assets hooked into your singleton?  So since you are probably using <a href="http://docs.unity3d.com/Documentation/Manual/Prefabs.html">prefabs</a> to manage game components in your scenes anyway, seems like it might be useful to have a self-loading prefab for components such as the player or a gui controller.</p>

<p>Just as singletons allow for really nice static access methods, this would allow me to really easily organize my project as a bunch of prefabs dumped into the Resources directory and when a level needed a particular component it would just use it, no need to instantiate and keep a reference within some big main class, nor keep it in the scene heirarchy at all to begin with.</p>

<!--more-->


<p></p>

<p>Below is my updated singleton class. What I ended up doing was adding an Attribute so you could just define the Prefab attribute for any singletons that did have associated prefabs and off you go.  I have left in some debug statements commented out for clarity.  The only caveat is that of course you could accidentally have added multiple instances of the prefab in your scene -- what I do now is to just throw an exception if that is the case (an alternative may be to just choose one and self-destruct the others but deciding which is correct is unclear).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Singleton.cs # </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">using</span> <span class="n">UnityEngine</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// Prefab attribute. Use this on child classes</span>
</span><span class='line'><span class="c1">/// to define if they have a prefab associated or not</span>
</span><span class='line'><span class="c1">/// By default will attempt to load a prefab</span>
</span><span class='line'><span class="c1">/// that has the same name as the class,</span>
</span><span class='line'><span class="c1">/// otherwise [Prefab(&quot;path/to/prefab&quot;)] to define it specifically.</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="p">[</span><span class="n">AttributeUsage</span><span class="p">(</span><span class="n">AttributeTargets</span><span class="p">.</span><span class="n">Class</span><span class="p">,</span><span class="n">Inherited</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)]</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">PrefabAttribute</span> <span class="o">:</span> <span class="n">Attribute</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'><span class="n">public</span> <span class="n">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">this</span><span class="p">.</span><span class="n">_name</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="n">PrefabAttribute</span><span class="p">()</span> <span class="p">{</span> <span class="n">this</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="n">PrefabAttribute</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span> <span class="n">this</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// MONOBEHAVIOR PSEUDO SINGLETON ABSTRACT CLASS</span>
</span><span class='line'><span class="c1">/// usage       : can be attached to a gameobject and if not</span>
</span><span class='line'><span class="c1">///             : this will create one on first access</span>
</span><span class='line'><span class="c1">/// example     : &#39;&#39;&#39;public sealed class MyClass : Singleton&lt;MyClass&gt; {&#39;&#39;&#39;</span>
</span><span class='line'><span class="c1">/// references  : http://tinyurl.com/d498g8c</span>
</span><span class='line'><span class="c1">///             : http://tinyurl.com/cc73a9h</span>
</span><span class='line'><span class="c1">///             : http://unifycommunity.com/wiki/index.php?title=Singleton</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="n">public</span> <span class="n">abstract</span> <span class="n">class</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">MonoBehaviour</span> <span class="n">where</span> <span class="n">T</span> <span class="o">:</span> <span class="n">MonoBehaviour</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">private</span> <span class="k">static</span> <span class="n">T</span> <span class="n">_instance</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">bool</span> <span class="n">IsAwake</span> <span class="p">{</span> <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">!=</span> <span class="n">null</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &amp;lt;summary&amp;gt;</span>
</span><span class='line'><span class="c1">/// gets the instance of this Singleton</span>
</span><span class='line'><span class="c1">/// use this for all instance calls:</span>
</span><span class='line'><span class="c1">/// MyClass.Instance.MyMethod();</span>
</span><span class='line'><span class="c1">/// or make your public methods static</span>
</span><span class='line'><span class="c1">/// and have them use Instance internally</span>
</span><span class='line'><span class="c1">/// for a nice clean interface</span>
</span><span class='line'><span class="c1">/// &amp;lt;/summary&amp;gt;</span>
</span><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">T</span> <span class="n">Instance</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Type</span> <span class="n">mytype</span> <span class="o">=</span> <span class="n">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_instance</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">FindObjectOfType</span> <span class="p">(</span><span class="n">mytype</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//Debug.Log(&quot;initializing instance of: &quot; + mytype.Name);</span>
</span><span class='line'>                <span class="n">string</span> <span class="n">goName</span> <span class="o">=</span> <span class="n">mytype</span><span class="p">.</span><span class="n">ToString</span> <span class="p">();</span>
</span><span class='line'>                <span class="n">GameObject</span> <span class="n">go</span> <span class="o">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="n">Find</span> <span class="p">(</span><span class="n">goName</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">go</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="c1">// try again searching for a cloned object</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">go</span> <span class="o">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="n">Find</span> <span class="p">(</span><span class="n">goName</span><span class="o">+</span><span class="s">&quot;(Clone)&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">go</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="c1">//Debug.Log(&quot;found clone of object using it!&quot;); </span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">go</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="c1">//if still not found try prefab or create</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">bool</span> <span class="n">hasPrefab</span> <span class="o">=</span> <span class="n">Attribute</span><span class="p">.</span><span class="n">IsDefined</span><span class="p">(</span><span class="n">mytype</span><span class="p">,</span> <span class="n">typeof</span><span class="p">(</span><span class="n">PrefabAttribute</span><span class="p">));</span>
</span><span class='line'>                    <span class="c1">// checks if the [Prefab] attribute is set and pulls that if it can</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">hasPrefab</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">PrefabAttribute</span> <span class="n">attr</span> <span class="o">=</span> <span class="p">(</span><span class="n">PrefabAttribute</span><span class="p">)</span><span class="n">Attribute</span><span class="p">.</span><span class="n">GetCustomAttribute</span><span class="p">(</span><span class="n">mytype</span><span class="p">,</span><span class="n">typeof</span><span class="p">(</span><span class="n">PrefabAttribute</span><span class="p">));</span>
</span><span class='line'>                        <span class="n">string</span> <span class="n">prefabname</span> <span class="o">=</span> <span class="n">attr</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'>                        <span class="c1">//Debug.LogWarning(goName + &quot; not found attempting to instantiate prefab... either: &quot; + goName + &quot; or: &quot; + prefabname);</span>
</span><span class='line'>                        <span class="n">try</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="n">prefabname</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">{</span>
</span><span class='line'>                                <span class="n">go</span> <span class="o">=</span> <span class="p">(</span><span class="n">GameObject</span><span class="p">)</span><span class="n">Instantiate</span><span class="p">(</span><span class="n">Resources</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">prefabname</span><span class="p">,</span> <span class="n">typeof</span><span class="p">(</span><span class="n">GameObject</span><span class="p">)));</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                            <span class="k">else</span>
</span><span class='line'>                            <span class="p">{</span>
</span><span class='line'>                                <span class="n">go</span> <span class="o">=</span> <span class="p">(</span><span class="n">GameObject</span><span class="p">)</span><span class="n">Instantiate</span><span class="p">(</span><span class="n">Resources</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">goName</span><span class="p">,</span> <span class="n">typeof</span><span class="p">(</span><span class="n">GameObject</span><span class="p">)));</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span> <span class="n">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">Debug</span><span class="p">.</span><span class="n">LogError</span><span class="p">(</span><span class="s">&quot;could not instantiate prefab even though prefab attribute was set: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="p">.</span><span class="n">Message</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">e</span><span class="p">.</span><span class="n">StackTrace</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">go</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="c1">//Debug.LogWarning(goName + &quot; not found creating...&quot;);</span>
</span><span class='line'>                        <span class="n">go</span> <span class="o">=</span> <span class="n">new</span> <span class="n">GameObject</span> <span class="p">();</span>
</span><span class='line'>                        <span class="n">go</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">goName</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">_instance</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">GetComponent</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">_instance</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">AddComponent</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">//Debug.Log(mytype.Name + &quot; had to be searched for but was found&quot;); </span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">FindObjectsOfType</span><span class="p">(</span><span class="n">mytype</span><span class="p">).</span><span class="n">Length</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">Debug</span><span class="p">.</span><span class="n">LogError</span><span class="p">(</span><span class="s">&quot;Singleton: there are &quot;</span> <span class="o">+</span> <span class="n">count</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="o">+</span> <span class="s">&quot; of &quot;</span> <span class="o">+</span> <span class="n">mytype</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">throw</span> <span class="n">new</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Too many (&quot;</span> <span class="o">+</span> <span class="n">count</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="o">+</span> <span class="s">&quot;) prefab singletons of type: &quot;</span> <span class="o">+</span> <span class="n">mytype</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &amp;lt;summary&amp;gt;</span>
</span><span class='line'><span class="c1">/// for garbage collection</span>
</span><span class='line'><span class="c1">/// &amp;lt;/summary&amp;gt;</span>
</span><span class='line'><span class="n">public</span> <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnApplicationQuit</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// release reference on exit</span>
</span><span class='line'>    <span class="n">_instance</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in your child class you can implement Awake()</span>
</span><span class='line'><span class="c1">//  and add any initialization code you want such as</span>
</span><span class='line'><span class="c1">//  DontDestroyOnLoad(this.gameObject);</span>
</span><span class='line'><span class="c1">//  if you want this to persist across loads</span>
</span><span class='line'><span class="c1">//  or if you want to set a parent object with SetParent()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &amp;lt;summary&amp;gt;</span>
</span><span class='line'><span class="c1">/// parent this to another gameobject by string</span>
</span><span class='line'><span class="c1">/// call from Awake if you so desire</span>
</span><span class='line'><span class="c1">/// &amp;lt;/summary&amp;gt;</span>
</span><span class='line'><span class="n">protected</span> <span class="kt">void</span> <span class="n">SetParent</span> <span class="p">(</span><span class="n">string</span> <span class="n">parentGOName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parentGOName</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">GameObject</span> <span class="n">parentGO</span> <span class="o">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="n">Find</span> <span class="p">(</span><span class="n">parentGOName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parentGO</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">parentGO</span> <span class="o">=</span> <span class="n">new</span> <span class="n">GameObject</span> <span class="p">();</span>
</span><span class='line'>            <span class="n">parentGO</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">parentGOName</span><span class="p">;</span>
</span><span class='line'>            <span class="n">parentGO</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">this</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parentGO</span><span class="p">.</span><span class="n">transform</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What do you think?  Only other caveats are those associated with using the <a href="http://docs.unity3d.com/Documentation/ScriptReference/Resources.html">Resources folder</a> in general such as not being able to strip out components that aren't used.  Since my games so far have been small this hasn't been an issue and I know that I should clean out any resources that I'm definitely not using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generic singleton MonoBehavior class]]></title>
    <link href="http://timofei7.github.com/blog/2012/04/26/unity-singletons/"/>
    <updated>2012-04-26T01:40:00-07:00</updated>
    <id>http://timofei7.github.com/blog/2012/04/26/unity-singletons</id>
    <content type="html"><![CDATA[<p>In <a href="http://www.unity3d.com">Unity3D</a> having a <a href="http://en.wikipedia.org/wiki/Singleton_pattern">singleton</a> class is very useful, whether for "global" state or simply for the convenience of having a static accessor so you don't have to have lots of: <code>FindObjectOfType(typeof(Builder)) as Builder;</code></p>

<p>So you code up a C# singleton and then realize that you actually need it to be a <a href="http://unity3d.com/support/documentation/ScriptReference/MonoBehaviour.html">MonoBehavior</a>, not just a <a href="http://unity3d.com/support/documentation/ScriptReference/ScriptableObject.html">ScriptableObject</a> -- say you want the singleton to run <a href="http://unity3d.com/support/documentation/ScriptReference/index.Coroutines_26_Yield.html">coroutines</a>, or have a transform, or any other MonoBehavior feature.  But monobehaviors <a href="http://unity3d.com/support/documentation/ScriptReference/MonoBehaviour.Awake.html">can't</a> be initialized with a constructor.</p>

<p>So what you want is a monobehavior pseudo singleton pattern.  The unity community wiki has some <a href="http://unifycommunity.com/wiki/index.php?title=Singleton">good info</a>
 about the various options but all require boilerplate.</p>

<p>So I wrote a parametrized generic pseudo singleton monobehavior class.  I attempted to compile all the best advice out there, so it is threadsafe, has some extra stuff for setting a parent, doesn't implement an Awake, and initializes lazily.</p>

<!--more-->


<p></p>

<p>The key was the C# <a href="http://msdn.microsoft.com/en-us/library/d5x73970.aspx">where</a> keyword, used to constrain the parameterizing type. So in this case both the class is a MonoBehavior and its parameterization type is a MonoBehavior.</p>

<p>So now this blog has its first code section:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Singleton.cs # </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">using</span> <span class="n">UnityEngine</span><span class="p">;</span>
</span><span class='line'><span class="n">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// MONOBEHAVIOR PSEUDO SINGLETON ABSTRACT CLASS</span>
</span><span class='line'><span class="c1">/// usage   : best is to be attached to a gameobject but if not that is ok,</span>
</span><span class='line'><span class="c1">///         : this will create one on first access</span>
</span><span class='line'><span class="c1">/// example : &#39;&#39;&#39;public sealed class MyClass : Singleton&lt;MyClass&gt; {&#39;&#39;&#39;</span>
</span><span class='line'><span class="c1">/// references  : http://tinyurl.com/d498g8c</span>
</span><span class='line'><span class="c1">///         : http://tinyurl.com/cc73a9h</span>
</span><span class='line'><span class="c1">///         : http://unifycommunity.com/wiki/index.php?title=Singleton</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="n">public</span> <span class="n">abstract</span> <span class="n">class</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">MonoBehaviour</span> <span class="n">where</span> <span class="n">T</span> <span class="o">:</span> <span class="n">MonoBehaviour</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">private</span> <span class="k">static</span> <span class="n">T</span> <span class="n">_instance</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &amp;lt;summary&amp;gt;</span>
</span><span class='line'><span class="c1">/// gets the instance of this Singleton</span>
</span><span class='line'><span class="c1">/// use this for all instance calls:</span>
</span><span class='line'><span class="c1">/// MyClass.Instance.MyMethod();</span>
</span><span class='line'><span class="c1">/// or make your public methods static</span>
</span><span class='line'><span class="c1">/// and have them use Instance</span>
</span><span class='line'><span class="c1">/// &amp;lt;/summary&amp;gt;</span>
</span><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="n">T</span> <span class="n">Instance</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_instance</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">FindObjectOfType</span> <span class="p">(</span><span class="n">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">string</span> <span class="n">goName</span> <span class="o">=</span> <span class="n">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">).</span><span class="n">ToString</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">GameObject</span> <span class="n">go</span> <span class="o">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="n">Find</span> <span class="p">(</span><span class="n">goName</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">go</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">go</span> <span class="o">=</span> <span class="n">new</span> <span class="n">GameObject</span> <span class="p">();</span>
</span><span class='line'>                    <span class="n">go</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">goName</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">_instance</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">AddComponent</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &amp;lt;summary&amp;gt;</span>
</span><span class='line'><span class="c1">/// for garbage collection</span>
</span><span class='line'><span class="c1">/// &amp;lt;/summary&amp;gt;</span>
</span><span class='line'><span class="n">public</span> <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnApplicationQuit</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// release reference on exit</span>
</span><span class='line'>    <span class="n">_instance</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in your child class you can implement Awake()</span>
</span><span class='line'><span class="c1">// and add any initialization code you want such as</span>
</span><span class='line'><span class="c1">// DontDestroyOnLoad(go);</span>
</span><span class='line'><span class="c1">// if you want this to persist across loads</span>
</span><span class='line'><span class="c1">// or if you want to set a parent object with SetParent()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &amp;lt;summary&amp;gt;</span>
</span><span class='line'><span class="c1">/// parent this to another gameobject by string</span>
</span><span class='line'><span class="c1">/// call from Awake if you so desire</span>
</span><span class='line'><span class="c1">/// &amp;lt;/summary&amp;gt;</span>
</span><span class='line'><span class="n">protected</span> <span class="kt">void</span> <span class="n">SetParent</span> <span class="p">(</span><span class="n">string</span> <span class="n">parentGOName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parentGOName</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">GameObject</span> <span class="n">parentGO</span> <span class="o">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="n">Find</span> <span class="p">(</span><span class="n">parentGOName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parentGO</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">parentGO</span> <span class="o">=</span> <span class="n">new</span> <span class="n">GameObject</span> <span class="p">();</span>
</span><span class='line'>            <span class="n">parentGO</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">parentGOName</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">this</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parentGO</span><span class="p">.</span><span class="n">transform</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
